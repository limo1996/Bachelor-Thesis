//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace PiStudio.Win10.UI
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace ImageProcessing.PiStudio_Win10_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[25];
            _typeNameTable[0] = "PiStudio.Win10.UI.Controls.MenuItem";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[2] = "PiStudio.Win10.Data.Theme";
            _typeNameTable[3] = "Object";
            _typeNameTable[4] = "Windows.UI.Xaml.Controls.Symbol";
            _typeNameTable[5] = "String";
            _typeNameTable[6] = "Boolean";
            _typeNameTable[7] = "PiStudio.Win10.UI.Controls.PiCanvas";
            _typeNameTable[8] = "Windows.UI.Color";
            _typeNameTable[9] = "System.ValueType";
            _typeNameTable[10] = "UInt32";
            _typeNameTable[11] = "PiStudio.Win10.UI.Controls.Toolbox";
            _typeNameTable[12] = "Double";
            _typeNameTable[13] = "Windows.UI.Xaml.Media.Brush";
            _typeNameTable[14] = "PiStudio.Win10.UI.Pages.BrightnessPage";
            _typeNameTable[15] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[16] = "PiStudio.Win10.UI.Pages.DrawingPage";
            _typeNameTable[17] = "PiStudio.Win10.UI.Controls.Rater";
            _typeNameTable[18] = "Windows.UI.Xaml.Controls.Grid";
            _typeNameTable[19] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[20] = "Int32";
            _typeNameTable[21] = "PiStudio.Win10.UI.Pages.FiltersPage";
            _typeNameTable[22] = "PiStudio.Win10.UI.Pages.HomePage";
            _typeNameTable[23] = "PiStudio.Win10.UI.Pages.SettingsPage";
            _typeNameTable[24] = "PiStudio.Win10.UI.Pages.WelcomePage";

            _typeTable = new global::System.Type[25];
            _typeTable[0] = typeof(global::PiStudio.Win10.UI.Controls.MenuItem);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[2] = typeof(global::PiStudio.Win10.Data.Theme);
            _typeTable[3] = typeof(global::System.Object);
            _typeTable[4] = typeof(global::Windows.UI.Xaml.Controls.Symbol);
            _typeTable[5] = typeof(global::System.String);
            _typeTable[6] = typeof(global::System.Boolean);
            _typeTable[7] = typeof(global::PiStudio.Win10.UI.Controls.PiCanvas);
            _typeTable[8] = typeof(global::Windows.UI.Color);
            _typeTable[9] = typeof(global::System.ValueType);
            _typeTable[10] = typeof(global::System.UInt32);
            _typeTable[11] = typeof(global::PiStudio.Win10.UI.Controls.Toolbox);
            _typeTable[12] = typeof(global::System.Double);
            _typeTable[13] = typeof(global::Windows.UI.Xaml.Media.Brush);
            _typeTable[14] = typeof(global::PiStudio.Win10.UI.Pages.BrightnessPage);
            _typeTable[15] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[16] = typeof(global::PiStudio.Win10.UI.Pages.DrawingPage);
            _typeTable[17] = typeof(global::PiStudio.Win10.UI.Controls.Rater);
            _typeTable[18] = typeof(global::Windows.UI.Xaml.Controls.Grid);
            _typeTable[19] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[20] = typeof(global::System.Int32);
            _typeTable[21] = typeof(global::PiStudio.Win10.UI.Pages.FiltersPage);
            _typeTable[22] = typeof(global::PiStudio.Win10.UI.Pages.HomePage);
            _typeTable[23] = typeof(global::PiStudio.Win10.UI.Pages.SettingsPage);
            _typeTable[24] = typeof(global::PiStudio.Win10.UI.Pages.WelcomePage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_MenuItem() { return new global::PiStudio.Win10.UI.Controls.MenuItem(); }
        private object Activate_2_Theme() { return new global::PiStudio.Win10.Data.Theme(); }
        private object Activate_7_PiCanvas() { return new global::PiStudio.Win10.UI.Controls.PiCanvas(); }
        private object Activate_11_Toolbox() { return new global::PiStudio.Win10.UI.Controls.Toolbox(); }
        private object Activate_14_BrightnessPage() { return new global::PiStudio.Win10.UI.Pages.BrightnessPage(); }
        private object Activate_16_DrawingPage() { return new global::PiStudio.Win10.UI.Pages.DrawingPage(); }
        private object Activate_17_Rater() { return new global::PiStudio.Win10.UI.Controls.Rater(); }
        private object Activate_21_FiltersPage() { return new global::PiStudio.Win10.UI.Pages.FiltersPage(); }
        private object Activate_22_HomePage() { return new global::PiStudio.Win10.UI.Pages.HomePage(); }
        private object Activate_23_SettingsPage() { return new global::PiStudio.Win10.UI.Pages.SettingsPage(); }
        private object Activate_24_WelcomePage() { return new global::PiStudio.Win10.UI.Pages.WelcomePage(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  PiStudio.Win10.UI.Controls.MenuItem
                userType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_0_MenuItem;
                userType.AddMemberName("ApplicationTheme");
                userType.AddMemberName("Symbol");
                userType.AddMemberName("Text");
                userType.AddMemberName("IsSelectionEnabled");
                userType.AddMemberName("IsSelected");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  PiStudio.Win10.Data.Theme
                userType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  Object
                xamlType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Windows.UI.Xaml.Controls.Symbol
                xamlType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  String
                xamlType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Boolean
                xamlType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  PiStudio.Win10.UI.Controls.PiCanvas
                userType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_7_PiCanvas;
                userType.AddMemberName("BrushColor");
                userType.AddMemberName("BrushThickness");
                userType.AddMemberName("IsEmpty");
                userType.AddMemberName("IsUnsavedChange");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Windows.UI.Color
                userType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  System.ValueType
                userType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 10:   //  UInt32
                xamlType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  PiStudio.Win10.UI.Controls.Toolbox
                userType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_11_Toolbox;
                userType.AddMemberName("ApplicationTheme");
                userType.AddMemberName("BorderThickness");
                userType.AddMemberName("BorderBrush");
                userType.AddMemberName("PopupBorderBrush");
                userType.AddMemberName("BrushThickness");
                userType.AddMemberName("BrushColor");
                userType.AddMemberName("Background");
                userType.AddMemberName("IsShadowEnabled");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Double
                xamlType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Windows.UI.Xaml.Media.Brush
                xamlType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 14:   //  PiStudio.Win10.UI.Pages.BrightnessPage
                userType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_14_BrightnessPage;
                userType.AddMemberName("ApplicationTheme");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  PiStudio.Win10.UI.Pages.DrawingPage
                userType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_16_DrawingPage;
                userType.AddMemberName("ApplicationTheme");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  PiStudio.Win10.UI.Controls.Rater
                userType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Grid"));
                userType.Activator = Activate_17_Rater;
                userType.AddMemberName("BorderBrush");
                userType.AddMemberName("Rating");
                userType.AddMemberName("Fill");
                userType.AddMemberName("SelectedFill");
                userType.AddMemberName("Rated");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  Windows.UI.Xaml.Controls.Grid
                xamlType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Int32
                xamlType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  PiStudio.Win10.UI.Pages.FiltersPage
                userType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_21_FiltersPage;
                userType.AddMemberName("ApplicationTheme");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  PiStudio.Win10.UI.Pages.HomePage
                userType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_HomePage;
                userType.AddMemberName("ApplicationTheme");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  PiStudio.Win10.UI.Pages.SettingsPage
                userType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_SettingsPage;
                userType.AddMemberName("ApplicationTheme");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  PiStudio.Win10.UI.Pages.WelcomePage
                userType = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_WelcomePage;
                userType.AddMemberName("ApplicationTheme");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_MenuItem_ApplicationTheme(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.MenuItem)instance;
            return that.ApplicationTheme;
        }
        private void set_0_MenuItem_ApplicationTheme(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.MenuItem)instance;
            that.ApplicationTheme = (global::PiStudio.Win10.Data.Theme)Value;
        }
        private object get_1_MenuItem_Symbol(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.MenuItem)instance;
            return that.Symbol;
        }
        private void set_1_MenuItem_Symbol(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.MenuItem)instance;
            that.Symbol = (global::Windows.UI.Xaml.Controls.Symbol)Value;
        }
        private object get_2_MenuItem_Text(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.MenuItem)instance;
            return that.Text;
        }
        private void set_2_MenuItem_Text(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.MenuItem)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_3_MenuItem_IsSelectionEnabled(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.MenuItem)instance;
            return that.IsSelectionEnabled;
        }
        private void set_3_MenuItem_IsSelectionEnabled(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.MenuItem)instance;
            that.IsSelectionEnabled = (global::System.Boolean)Value;
        }
        private object get_4_MenuItem_IsSelected(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.MenuItem)instance;
            return that.IsSelected;
        }
        private void set_4_MenuItem_IsSelected(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.MenuItem)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_5_PiCanvas_BrushColor(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.PiCanvas)instance;
            return that.BrushColor;
        }
        private void set_5_PiCanvas_BrushColor(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.PiCanvas)instance;
            that.BrushColor = (global::Windows.UI.Color)Value;
        }
        private object get_6_PiCanvas_BrushThickness(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.PiCanvas)instance;
            return that.BrushThickness;
        }
        private void set_6_PiCanvas_BrushThickness(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.PiCanvas)instance;
            that.BrushThickness = (global::System.UInt32)Value;
        }
        private object get_7_PiCanvas_IsEmpty(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.PiCanvas)instance;
            return that.IsEmpty;
        }
        private object get_8_PiCanvas_IsUnsavedChange(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.PiCanvas)instance;
            return that.IsUnsavedChange;
        }
        private object get_9_Toolbox_ApplicationTheme(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            return that.ApplicationTheme;
        }
        private void set_9_Toolbox_ApplicationTheme(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            that.ApplicationTheme = (global::PiStudio.Win10.Data.Theme)Value;
        }
        private object get_10_Toolbox_BorderThickness(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            return that.BorderThickness;
        }
        private void set_10_Toolbox_BorderThickness(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            that.BorderThickness = (global::System.Double)Value;
        }
        private object get_11_Toolbox_BorderBrush(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            return that.BorderBrush;
        }
        private void set_11_Toolbox_BorderBrush(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            that.BorderBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_12_Toolbox_PopupBorderBrush(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            return that.PopupBorderBrush;
        }
        private void set_12_Toolbox_PopupBorderBrush(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            that.PopupBorderBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_13_Toolbox_BrushThickness(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            return that.BrushThickness;
        }
        private void set_13_Toolbox_BrushThickness(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            that.BrushThickness = (global::System.Double)Value;
        }
        private object get_14_Toolbox_BrushColor(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            return that.BrushColor;
        }
        private void set_14_Toolbox_BrushColor(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            that.BrushColor = (global::Windows.UI.Color)Value;
        }
        private object get_15_Toolbox_Background(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            return that.Background;
        }
        private void set_15_Toolbox_Background(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            that.Background = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_16_Toolbox_IsShadowEnabled(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            return that.IsShadowEnabled;
        }
        private void set_16_Toolbox_IsShadowEnabled(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Toolbox)instance;
            that.IsShadowEnabled = (global::System.Boolean)Value;
        }
        private object get_17_BrightnessPage_ApplicationTheme(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Pages.BrightnessPage)instance;
            return that.ApplicationTheme;
        }
        private void set_17_BrightnessPage_ApplicationTheme(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Pages.BrightnessPage)instance;
            that.ApplicationTheme = (global::PiStudio.Win10.Data.Theme)Value;
        }
        private object get_18_DrawingPage_ApplicationTheme(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Pages.DrawingPage)instance;
            return that.ApplicationTheme;
        }
        private void set_18_DrawingPage_ApplicationTheme(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Pages.DrawingPage)instance;
            that.ApplicationTheme = (global::PiStudio.Win10.Data.Theme)Value;
        }
        private object get_19_Rater_BorderBrush(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Rater)instance;
            return that.BorderBrush;
        }
        private void set_19_Rater_BorderBrush(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Rater)instance;
            that.BorderBrush = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_20_Rater_Rating(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Rater)instance;
            return that.Rating;
        }
        private void set_20_Rater_Rating(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Rater)instance;
            that.Rating = (global::System.Int32)Value;
        }
        private object get_21_Rater_Fill(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Rater)instance;
            return that.Fill;
        }
        private void set_21_Rater_Fill(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Rater)instance;
            that.Fill = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_22_Rater_SelectedFill(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Rater)instance;
            return that.SelectedFill;
        }
        private void set_22_Rater_SelectedFill(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Rater)instance;
            that.SelectedFill = (global::Windows.UI.Xaml.Media.Brush)Value;
        }
        private object get_23_Rater_Rated(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Controls.Rater)instance;
            return that.Rated;
        }
        private object get_24_FiltersPage_ApplicationTheme(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Pages.FiltersPage)instance;
            return that.ApplicationTheme;
        }
        private void set_24_FiltersPage_ApplicationTheme(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Pages.FiltersPage)instance;
            that.ApplicationTheme = (global::PiStudio.Win10.Data.Theme)Value;
        }
        private object get_25_HomePage_ApplicationTheme(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Pages.HomePage)instance;
            return that.ApplicationTheme;
        }
        private void set_25_HomePage_ApplicationTheme(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Pages.HomePage)instance;
            that.ApplicationTheme = (global::PiStudio.Win10.Data.Theme)Value;
        }
        private object get_26_SettingsPage_ApplicationTheme(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Pages.SettingsPage)instance;
            return that.ApplicationTheme;
        }
        private void set_26_SettingsPage_ApplicationTheme(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Pages.SettingsPage)instance;
            that.ApplicationTheme = (global::PiStudio.Win10.Data.Theme)Value;
        }
        private object get_27_WelcomePage_ApplicationTheme(object instance)
        {
            var that = (global::PiStudio.Win10.UI.Pages.WelcomePage)instance;
            return that.ApplicationTheme;
        }
        private void set_27_WelcomePage_ApplicationTheme(object instance, object Value)
        {
            var that = (global::PiStudio.Win10.UI.Pages.WelcomePage)instance;
            that.ApplicationTheme = (global::PiStudio.Win10.Data.Theme)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember xamlMember = null;
            global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "PiStudio.Win10.UI.Controls.MenuItem.ApplicationTheme":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.MenuItem");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "ApplicationTheme", "PiStudio.Win10.Data.Theme");
                xamlMember.Getter = get_0_MenuItem_ApplicationTheme;
                xamlMember.Setter = set_0_MenuItem_ApplicationTheme;
                break;
            case "PiStudio.Win10.UI.Controls.MenuItem.Symbol":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.MenuItem");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "Symbol", "Windows.UI.Xaml.Controls.Symbol");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_MenuItem_Symbol;
                xamlMember.Setter = set_1_MenuItem_Symbol;
                break;
            case "PiStudio.Win10.UI.Controls.MenuItem.Text":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.MenuItem");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_MenuItem_Text;
                xamlMember.Setter = set_2_MenuItem_Text;
                break;
            case "PiStudio.Win10.UI.Controls.MenuItem.IsSelectionEnabled":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.MenuItem");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "IsSelectionEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_MenuItem_IsSelectionEnabled;
                xamlMember.Setter = set_3_MenuItem_IsSelectionEnabled;
                break;
            case "PiStudio.Win10.UI.Controls.MenuItem.IsSelected":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.MenuItem");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_MenuItem_IsSelected;
                xamlMember.Setter = set_4_MenuItem_IsSelected;
                break;
            case "PiStudio.Win10.UI.Controls.PiCanvas.BrushColor":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.PiCanvas");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "BrushColor", "Windows.UI.Color");
                xamlMember.Getter = get_5_PiCanvas_BrushColor;
                xamlMember.Setter = set_5_PiCanvas_BrushColor;
                break;
            case "PiStudio.Win10.UI.Controls.PiCanvas.BrushThickness":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.PiCanvas");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "BrushThickness", "UInt32");
                xamlMember.Getter = get_6_PiCanvas_BrushThickness;
                xamlMember.Setter = set_6_PiCanvas_BrushThickness;
                break;
            case "PiStudio.Win10.UI.Controls.PiCanvas.IsEmpty":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.PiCanvas");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "IsEmpty", "Boolean");
                xamlMember.Getter = get_7_PiCanvas_IsEmpty;
                xamlMember.SetIsReadOnly();
                break;
            case "PiStudio.Win10.UI.Controls.PiCanvas.IsUnsavedChange":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.PiCanvas");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "IsUnsavedChange", "Boolean");
                xamlMember.Getter = get_8_PiCanvas_IsUnsavedChange;
                xamlMember.SetIsReadOnly();
                break;
            case "PiStudio.Win10.UI.Controls.Toolbox.ApplicationTheme":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.Toolbox");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "ApplicationTheme", "PiStudio.Win10.Data.Theme");
                xamlMember.Getter = get_9_Toolbox_ApplicationTheme;
                xamlMember.Setter = set_9_Toolbox_ApplicationTheme;
                break;
            case "PiStudio.Win10.UI.Controls.Toolbox.BorderThickness":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.Toolbox");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "BorderThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_Toolbox_BorderThickness;
                xamlMember.Setter = set_10_Toolbox_BorderThickness;
                break;
            case "PiStudio.Win10.UI.Controls.Toolbox.BorderBrush":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.Toolbox");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "BorderBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_Toolbox_BorderBrush;
                xamlMember.Setter = set_11_Toolbox_BorderBrush;
                break;
            case "PiStudio.Win10.UI.Controls.Toolbox.PopupBorderBrush":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.Toolbox");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "PopupBorderBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_Toolbox_PopupBorderBrush;
                xamlMember.Setter = set_12_Toolbox_PopupBorderBrush;
                break;
            case "PiStudio.Win10.UI.Controls.Toolbox.BrushThickness":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.Toolbox");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "BrushThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_Toolbox_BrushThickness;
                xamlMember.Setter = set_13_Toolbox_BrushThickness;
                break;
            case "PiStudio.Win10.UI.Controls.Toolbox.BrushColor":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.Toolbox");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "BrushColor", "Windows.UI.Color");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_Toolbox_BrushColor;
                xamlMember.Setter = set_14_Toolbox_BrushColor;
                break;
            case "PiStudio.Win10.UI.Controls.Toolbox.Background":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.Toolbox");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "Background", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_Toolbox_Background;
                xamlMember.Setter = set_15_Toolbox_Background;
                break;
            case "PiStudio.Win10.UI.Controls.Toolbox.IsShadowEnabled":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.Toolbox");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "IsShadowEnabled", "Boolean");
                xamlMember.Getter = get_16_Toolbox_IsShadowEnabled;
                xamlMember.Setter = set_16_Toolbox_IsShadowEnabled;
                break;
            case "PiStudio.Win10.UI.Pages.BrightnessPage.ApplicationTheme":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Pages.BrightnessPage");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "ApplicationTheme", "PiStudio.Win10.Data.Theme");
                xamlMember.Getter = get_17_BrightnessPage_ApplicationTheme;
                xamlMember.Setter = set_17_BrightnessPage_ApplicationTheme;
                break;
            case "PiStudio.Win10.UI.Pages.DrawingPage.ApplicationTheme":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Pages.DrawingPage");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "ApplicationTheme", "PiStudio.Win10.Data.Theme");
                xamlMember.Getter = get_18_DrawingPage_ApplicationTheme;
                xamlMember.Setter = set_18_DrawingPage_ApplicationTheme;
                break;
            case "PiStudio.Win10.UI.Controls.Rater.BorderBrush":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.Rater");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "BorderBrush", "Windows.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_Rater_BorderBrush;
                xamlMember.Setter = set_19_Rater_BorderBrush;
                break;
            case "PiStudio.Win10.UI.Controls.Rater.Rating":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.Rater");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "Rating", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_Rater_Rating;
                xamlMember.Setter = set_20_Rater_Rating;
                break;
            case "PiStudio.Win10.UI.Controls.Rater.Fill":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.Rater");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "Fill", "Windows.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_21_Rater_Fill;
                xamlMember.Setter = set_21_Rater_Fill;
                break;
            case "PiStudio.Win10.UI.Controls.Rater.SelectedFill":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.Rater");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "SelectedFill", "Windows.UI.Xaml.Media.Brush");
                xamlMember.Getter = get_22_Rater_SelectedFill;
                xamlMember.Setter = set_22_Rater_SelectedFill;
                break;
            case "PiStudio.Win10.UI.Controls.Rater.Rated":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Controls.Rater");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "Rated", "Boolean");
                xamlMember.Getter = get_23_Rater_Rated;
                xamlMember.SetIsReadOnly();
                break;
            case "PiStudio.Win10.UI.Pages.FiltersPage.ApplicationTheme":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Pages.FiltersPage");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "ApplicationTheme", "PiStudio.Win10.Data.Theme");
                xamlMember.Getter = get_24_FiltersPage_ApplicationTheme;
                xamlMember.Setter = set_24_FiltersPage_ApplicationTheme;
                break;
            case "PiStudio.Win10.UI.Pages.HomePage.ApplicationTheme":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Pages.HomePage");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "ApplicationTheme", "PiStudio.Win10.Data.Theme");
                xamlMember.Getter = get_25_HomePage_ApplicationTheme;
                xamlMember.Setter = set_25_HomePage_ApplicationTheme;
                break;
            case "PiStudio.Win10.UI.Pages.SettingsPage.ApplicationTheme":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Pages.SettingsPage");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "ApplicationTheme", "PiStudio.Win10.Data.Theme");
                xamlMember.Getter = get_26_SettingsPage_ApplicationTheme;
                xamlMember.Setter = set_26_SettingsPage_ApplicationTheme;
                break;
            case "PiStudio.Win10.UI.Pages.WelcomePage.ApplicationTheme":
                userType = (global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlUserType)GetXamlTypeByName("PiStudio.Win10.UI.Pages.WelcomePage");
                xamlMember = new global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlMember(this, "ApplicationTheme", "PiStudio.Win10.Data.Theme");
                xamlMember.Getter = get_27_WelcomePage_ApplicationTheme;
                xamlMember.Setter = set_27_WelcomePage_ApplicationTheme;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlSystemBaseType
    {
        global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::ImageProcessing.PiStudio_Win10_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

